VISUAL REASONING TASK IMPLEMENTATION PLAN
==========================================

OVERVIEW
--------
This plan outlines the implementation of a visual reasoning task with two experiment types:
1. Experiment 1: Target-matching task (pick most similar to target)
2. Experiment 2: Pattern completion task (fill in the missing pattern)

The task will use the speeded-matching package as a CSS styling template and implement a genSeed function for reproducible randomization.

CURRENT STATE ASSESSMENT
------------------------
- Visual-reasoning package exists with sophisticated CAT implementation
- Main index.ts file has 920 lines of adaptive testing logic
- Images.ts file contains SVG definitions but stimulus groups are commented out
- Item bank is currently empty (returns empty array)
- Practice trials are not properly implemented
- Speeded-matching package provides excellent CSS styling template

IMPLEMENTATION STEPS
====================

STEP 1: ANALYZE AND UNDERSTAND EXISTING STRUCTURE
-------------------------------------------------
□ Review current index.ts implementation in visual-reasoning package
□ Understand the CAT (Computerized Adaptive Testing) system in place
□ Examine the images.ts file structure and available SVG categories
□ Study speeded-matching CSS styling patterns and responsive design

STEP 2: EXTRACT CSS STYLING FROM SPEEDED-MATCHING TEMPLATE
----------------------------------------------------------
□ Copy CSS styling patterns from speeded-matching/src/styles.css
□ Adapt container layouts for visual reasoning task needs:
  - Target stimulus display area
  - Response option grids (2x2, 1x4, etc.)
  - Pattern sequence display areas
□ Modify responsive design for different screen sizes
□ Update CSS class names to match visual-reasoning context
□ Implement animation patterns for feedback and transitions

STEP 3: RESTRUCTURE IMAGES.TS FILE
----------------------------------
□ Implement helper functions for category-based selection

STEP 4: IMPLEMENT EXPERIMENT 1 - TARGET MATCHING TASK
-----------------------------------------------------
□ Create targetMatchingTrial function:
  - Display one target stimulus from specific category
  - Generate correct answer from same category
  - Generate distractors based on difficulty level:
    * Easy: options from different categories
    * Medium: One option from same category, rest from other categories	
    * Hard: options from related categories within same domain
□ Implement stimulus selection logic:
  - Random category selection
  - Random target selection within category
  - Difficulty-based distractor generation
□ Create response collection and validation
□ Add performance tracking and feedback
□ The structure should be the followin

STEP 5: IMPLEMENT EXPERIMENT 2 - PATTERN COMPLETION TASK
--------------------------------------------------------
□ Create patternCompletionTrial function:
  - Select two SVGs for alternating pattern
  - Display first 3 items in sequence (A-B-A)
  - Hide 4th item with question mark placeholder
  - Generate response options (correct B + 3 random distractors)
□ Implement pattern logic:
  - Alternating sequence generation
  - Response option randomization
  - Visual layout for sequence display
□ Add pattern validation and scoring

STEP 6: IMPLEMENT GENSEED FUNCTION
----------------------------------
□ Create genSeed function with parameters:
  - numberOfAnswerOptions: number
  - numberOfExp1Trials: number  
  - numberOfExp2Trials: number
  - difficulty: 'Easy' | 'standard' | 'hard'
  - seedNumber: number
□ Implement jsPsych.randomization.setSeed() integration
□ Create reproducible randomization using the seeded randomisation (the following should automatically happen when using seeded randomisation, you should just confirm that the reproducible randomisation is happening):
  - Trial order generation
  - Stimulus selection
  - Distractor generation
  - Response option positioning
□ Add seed validation and error handling

STEP 7: INTEGRATE EXPERIMENT TYPES INTO MAIN TIMELINE
-----------------------------------------------------
□ Modify existing CAT implementation to support new experiment types
□ Create experiment type selection logic
□ Implement trial generation based on genSeed parameters
□ Balance experiment 1 and experiment 2 trials
□ Maintain existing adaptive testing features where applicable

STEP 8: UPDATE STIMULUS GENERATION SYSTEM
-----------------------------------------
□ Replace empty loadItemBank() function with actual item generation
□ Ensure images.ts image definitions are being used in trial generation
□ Create difficulty-based item selection algorithms

STEP 9: MAINTAIN EXISTING FEATURES
----------------------------------
□ Preserve CAT algorithm for adaptive difficulty
□ Keep audio/TTS support system
□ Maintain progress tracking and theta estimation
□ Preserve data collection and analysis features
□ Remove participant demographics integration

STEP 10: TESTING AND VALIDATION
-------------------------------
□ Test seed reproducibility with same parameters
□ Validate difficulty level implementations
□ Test responsive design across devices
□ Verify experiment type balance and flow
□ Test edge cases and error handling
□ Validate data collection and output format

STEP 11: DOCUMENTATION AND CLEANUP
----------------------------------
□ Add usage examples for new experiment types
□ Document genSeed function parameters and usage
□ Clean up commented code and TODO items
□ Add TypeScript type definitions for new components

TECHNICAL CONSIDERATIONS
========================

DIFFICULTY IMPLEMENTATION
-------------------------
Easy Difficulty (Experiment 1):
- Target: Stationary -> Pens category (pens)
- Correct: Same sub-category (pens)
- Distractors: Different categories (food, things, space)

Medium Difficulty (Experiment 1)
- Target: Space -> flight_related category (flight_related)
- Correct: Same subcategory (flight_related)
- Distractors: One from same category but a different sub-categories (eg. space -> planets) and others random (eg. food or stationary category)

Hard Difficulty (Experiment 1):
- Target: Space -> Planets category (planets)
- Correct: Same sub-category (planets)
- Distractors: Same categories but not same sub-category (eg. flight_related)

SEED IMPLEMENTATION
------------------
- Use jsPsych.randomization.setSeed(seedNumber)
- Store seed in trial data for reproducibility
- Apply to all randomization: stimulus selection, option ordering, trial sequence
- Validate seed format and provide error handling

CSS TEMPLATE ADAPTATION
-----------------------
- Maintain speeded-matching responsive design patterns
- Adapt viewport-based units (vmin) for visual reasoning layouts
- Preserve animation and feedback systems
- Update CSS custom properties for new experiment types

DATA STRUCTURE
--------------
- Maintain existing CAT data collection
- Add experiment type tracking
- Include seed information in trial data
- Preserve theta estimation and performance metrics

DEPENDENCIES
------------
- jsPsych 8.2.1 with required plugins
- Existing TypeScript build system
- seedrandom package (via jsPsych randomization)
- Current SVG image system

DELIVERABLES
============
1. Updated index.ts with both experiment types
3. genSeed function implementation
4. CSS styling adapted from speeded-matching template
5. Updated documentation and examples
6. Updated parameters list which includes a single parameter through which number of answers, number of experiment 1 trials, number of experiment 2 trials, difficulty level and seed number will be determined


SUCCESS CRITERIA
================
✅ Both experiment types function correctly
✅ genSeed provides reproducible randomization
✅ Difficulty levels work as specified
✅ CSS styling matches speeded-matching quality
✅ Existing CAT features are preserved
✅ Integration with main createTimeline function completed
✅ Updated index.html with seed parameters
✅ Package successfully builds with TypeScript