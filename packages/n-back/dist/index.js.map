{"version":3,"sources":["../../../node_modules/@jspsych/plugin-html-keyboard-response/src/index.ts","../src/index.ts"],"names":["version","info","accuracy"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAM,OAAc;EAClB,MAAM;EAAA,SACNA,SAAAA;EACA,YAAY;IAIV,UAAU;MACR,MAAM,cAAc;MACpB,SAAS;IAAA;IAYX,SAAS;MACP,MAAM,cAAc;MACpB,SAAS;IAAA;IAOX,QAAQ;MACN,MAAM,cAAc;MACpB,SAAS;IAAA;IAOX,mBAAmB;MACjB,MAAM,cAAc;MACpB,SAAS;IAAA;IAQX,gBAAgB;MACd,MAAM,cAAc;MACpB,SAAS;IAAA;IAQX,qBAAqB;MACnB,MAAM,cAAc;MACpB,SAAS;IAAA;EACX;EAEF,MAAM;IAEJ,UAAU;MACR,MAAM,cAAc;IAAA;IAGtB,IAAI;MACF,MAAM,cAAc;IAAA;IAGtB,UAAU;MACR,MAAM,cAAc;IAAA;EACtB;AAEJ;AAYA,IAAM,6BAAN,MAAgE;EAE9D,YAAoB,SAAkB;AAAlB,SAAA,UAAA;EAAA;EAEpB,MAAM,iBAA8B,OAAwB;AACtD,QAAA,WAAW,uDAAuD,MAAM,WAAW;AAGnF,QAAA,MAAM,WAAW,MAAM;AACzB,kBAAY,MAAM;IAAA;AAIpB,oBAAgB,YAAY;AAG5B,QAAI,WAAW;MACb,IAAI;MACJ,KAAK;IAAA;AAIP,UAAM,YAAY,MAAM;AAElB,UAAA,OAAO,qBAAqB,aAAa;AACtC,aAAA,QAAQ,UAAU,uBAAuB,gBAAgB;MAAA;AAIhE,UAAI,aAAa;QACf,IAAI,SAAS;QACb,UAAU,MAAM;QAChB,UAAU,SAAS;MAAA;AAIhB,WAAA,QAAQ,YAAY,UAAU;IAAA;AAIjC,QAAA,iBAAiB,CAACC,UAAS;AAGb,sBAAA,cAAc,0CAA0C,EAAE,aACxE;AAGE,UAAA,SAAS,OAAO,MAAM;AACbA,mBAAAA;MAAA;AAGb,UAAI,MAAM,qBAAqB;AACnB,kBAAA;MAAA;IACZ;AAIE,QAAA,MAAM,WAAW,WAAW;AAC9B,UAAI,mBAAmB,KAAK,QAAQ,UAAU,oBAAoB;QAChE,mBAAmB;QACnB,iBAAiB,MAAM;QACvB,WAAW;QACX,SAAS;QACT,gBAAgB;MAAA,CACjB;IAAA;AAIC,QAAA,MAAM,sBAAsB,MAAM;AAC/B,WAAA,QAAQ,UAAU,WAAW,MAAM;AACtB,wBAAA;UACd;QAAA,EACA,MAAM,aAAa;MAAA,GACpB,MAAM,iBAAiB;IAAA;AAIxB,QAAA,MAAM,mBAAmB,MAAM;AACjC,WAAK,QAAQ,UAAU,WAAW,WAAW,MAAM,cAAc;IAAA;EACnE;EAGF,SACE,OACA,iBACA,oBACA,eACA;AACA,QAAI,mBAAmB,aAAa;AACpB,oBAAA;AACT,WAAA,mBAAmB,OAAO,kBAAkB;IAAA;AAEnD,QAAI,mBAAmB,UAAU;AAC1B,WAAA,gBAAgB,OAAO,oBAAoB,aAAa;IAAA;EAC/D;EAGM,uBAAuB,OAAwB,oBAAoB;AACzE,UAAM,eAAe;MACnB,UAAU,MAAM;MAChB,IAAI,KAAK,QAAQ,cAAc,iBAAiB,KAAK,IAAI,IAAI,KAAK,IAAI;MACtE,UAAU,KAAK,QAAQ,UAAU,YAAY,MAAM,OAAO;IAAA;AAG5D,UAAM,OAAO,KAAK,QAAQ,UAAU,oBAAoB,cAAc,kBAAkB;AAExF,SAAK,QAAQ,UAAU,gCAAgC,OAAO,IAAI;AAE3D,WAAA;EAAA;EAGD,mBAAmB,OAAwB,oBAAoB;AACrE,UAAM,OAAO,KAAK,uBAAuB,OAAO,kBAAkB;AAE7D,SAAA,QAAQ,YAAY,IAAI;EAAA;EAGvB,gBAAgB,OAAwB,oBAAoB,eAA2B;AAC7F,UAAM,OAAO,KAAK,uBAAuB,OAAO,kBAAkB;AAE5D,UAAA,kBAAkB,KAAK,QAAQ,kBAAkB;AAElD,SAAA,MAAM,iBAAiB,KAAK;AACnB,kBAAA;AAEV,QAAA,KAAK,OAAO,MAAM;AACpB,WAAK,QAAQ,UAAU,SAAS,KAAK,UAAU,KAAK,EAAE;IAAA;EACxD;AAEJ;AAjIM,2BACG,OAAO;;;AC5FT,SAAS,eAAe,SAC7B,SACA,oBAA4B,KAC5B,iBAAyB,KACzB,iBAAyB,KACzB,oBAA4B,KAC5B,IAAY,GACZ,aAAqB,IACrB,YAAoB,KACpB,UAAmB,OACnB,kBAA2B,OAC3B,cAAuC,QAAQ;AAE/C,QAAM,iBAAwB,CAAC;AAE/B,WAAS,IAAI,GAAG,IAAI,YAAY,KAAK;AACnC,QAAI,KAAK,KAAK,KAAK,OAAO,IAAI,WAAW;AACrC,qBAAe,KAAK,eAAe,IAAI,CAAC,CAAC;AAAA,IAC7C,OAAO;AACH,YAAM,mBAAmB,QAAQ,OAAO,SAAU,GAAQ;AACxD,eAAQ,IAAI,KAAK,MAAM,eAAe,IAAI,CAAC;AAAA,MAC7C,CAAC;AACD,YAAM,kBAAkB,QAAQ,cAAc,yBAAyB,kBAAkB,CAAC,EAAE,CAAC;AAC7F,qBAAe,KAAK,eAAe;AAAA,IACrC;AAAA,EACF;AAEF,QAAM,WAAkB,CAAC;AAEzB,WAAS,IAAI,GAAG,IAAI,eAAe,QAAQ,KAAK;AAE9C,aAAS,KAAK;AAAA,MACZ,MAAM;AAAA,MACN,UAAU;AAAA,MACV,SAAS;AAAA,MACT,gBAAgB;AAAA,IAClB,CAAC;AAED,aAAS,KAAK;AAAA,MACZ,MAAM;AAAA,MACN,UAAU,+BAA+B,eAAe,CAAC;AAAA,MACzD,SAAS,CAAC,iBAAiB;AAAA,MAC3B;AAAA,MACA;AAAA,MACA,MAAM,EAAE,SAAS,KAAK,KAAK,eAAe,CAAC,EAAE,YAAY,MAAM,eAAe,IAAI,CAAC,EAAE,YAAY,EAAE;AAAA,MACnG,WAAW,SAAU,MAAW;AAC9B,aAAK,mBAAmB,KAAK,WAAW,KAAK,YAAY;AACzD,aAAK,sBAAsB,CAAC,KAAK,WAAW,KAAK,aAAa;AAAA,MAChE;AAAA,IACF,CAAC;AAAA,EACH;AAGA,MAAI,SAAQ;AACZ,QAAI,iBAAgB;AAClB,eAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,UAAU,WAAU;AAClB,gBAAI,oBAAoB,QAAQ,KAAK,IAAI,EAAE,OAAO,EAAC,kBAAkB,KAAI,CAAC,EAAE,MAAM;AAClF,gBAAI,uBAAuB,QAAQ,KAAK,IAAI,EAAE,OAAO,EAAC,qBAAqB,KAAI,CAAC,EAAE,MAAM;AACxF,gBAAI,eAAe,QAAQ,KAAK,IAAI,EAAE,MAAM;AAC5C,gBAAI,WAAW,KAAK,OAAQ,oBAAoB,wBAAwB,eAAgB,GAAG;AAC3F,kBAAM,gBAAgB,CAAC,kBAA0B,qBAA6BC,cAA6B;AACzG,qBAAO;AAAA,4DACyC;AAAA,kEACM;AAAA,mDACfA;AAAA;AAAA,YAEzC;AACA,mBAAO,cAAc,mBAAmB,sBAAsB,QAAQ;AAAA,UACxE;AAAA,UACA,SAAS;AAAA,UACT,UAAU,WAAY;AACpB,gBAAI,eAAe,OAAM;AACzB,sBAAQ,KAAK,IAAI,EAAE,UAAU,OAAO,YAAY;AAAA,YAAE,WAAW,eAAe,QAAQ;AAClF,sBAAQ,KAAK,IAAI,EAAE,UAAU,QAAQ,aAAa;AAAA,YACpD;AAAA,UACF;AAAA,UACA,oBAAoB;AAAA,YAClB,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MAAC;AAAA,IACL,OAAO;AACL,eAAS;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,UAAU,WAAU;AAClB,mBAAO;AAAA;AAAA,UAET;AAAA,UACA,SAAS;AAAA,UACT,UAAU,WAAY;AACpB,gBAAI,eAAe,OAAM;AACvB,qBAAO,QAAQ,KAAK,IAAI,EAAE,UAAU,OAAO,YAAY;AAAA,YAAE,WAAW,eAAe,QAAQ;AACzF,qBAAO,QAAQ,KAAK,IAAI,EAAE,UAAU,QAAQ,aAAa;AAAA,YAC3D,OAAO;AAAC,qBAAO;AAAA,YAAI;AAAA,UACvB;AAAA,UACA,oBAAoB;AAAA,YAClB,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,MAAC;AAAA,IACL;AAAA,EAAC;AAED,SAAO;AACT","sourcesContent":["import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\n\nimport { version } from \"../package.json\";\n\nconst info = <const>{\n  name: \"html-keyboard-response\",\n  version: version,\n  parameters: {\n    /**\n     * The string to be displayed.\n     */\n    stimulus: {\n      type: ParameterType.HTML_STRING,\n      default: undefined,\n    },\n    /**\n     * This array contains the key(s) that the participant is allowed to press in order to respond\n     * to the stimulus. Keys should be specified as characters (e.g., `'a'`, `'q'`, `' '`, `'Enter'`, `'ArrowDown'`) - see\n     * {@link https://developer.mozilla.org/en-US/docs/Web/API/UI_Events/Keyboard_event_key_values this page}\n     * and\n     * {@link https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/ this page (event.key column)}\n     * for more examples. Any key presses that are not listed in the\n     * array will be ignored. The default value of `\"ALL_KEYS\"` means that all keys will be accepted as valid responses.\n     * Specifying `\"NO_KEYS\"` will mean that no responses are allowed.\n     */\n    choices: {\n      type: ParameterType.KEYS,\n      default: \"ALL_KEYS\",\n    },\n    /**\n     * This string can contain HTML markup. Any content here will be displayed below the stimulus.\n     * The intention is that it can be used to provide a reminder about the action the participant\n     * is supposed to take (e.g., which key to press).\n     */\n    prompt: {\n      type: ParameterType.HTML_STRING,\n      default: null,\n    },\n    /**\n     * How long to display the stimulus in milliseconds. The visibility CSS property of the stimulus\n     * will be set to `hidden` after this time has elapsed. If this is null, then the stimulus will\n     * remain visible until the trial ends.\n     */\n    stimulus_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * How long to wait for the participant to make a response before ending the trial in milliseconds.\n     * If the participant fails to make a response before this timer is reached, the participant's response\n     * will be recorded as null for the trial and the trial will end. If the value of this parameter is null,\n     * then the trial will wait for a response indefinitely.\n     */\n    trial_duration: {\n      type: ParameterType.INT,\n      default: null,\n    },\n    /**\n     * If true, then the trial will end whenever the participant makes a response (assuming they make their\n     * response before the cutoff specified by the trial_duration parameter). If false, then the trial will\n     * continue until the value for trial_duration is reached. You can set this parameter to false to force\n     * the participant to view a stimulus for a fixed amount of time, even if they respond before the time is complete.\n     */\n    response_ends_trial: {\n      type: ParameterType.BOOL,\n      default: true,\n    },\n  },\n  data: {\n    /** Indicates which key the participant pressed. */\n    response: {\n      type: ParameterType.STRING,\n    },\n    /** The response time in milliseconds for the participant to make a response. The time is measured from when the stimulus first appears on the screen until the participant's response. */\n    rt: {\n      type: ParameterType.INT,\n    },\n    /** The HTML content that was displayed on the screen. */\n    stimulus: {\n      type: ParameterType.STRING,\n    },\n  },\n};\n\ntype Info = typeof info;\n\n/**\n * This plugin displays HTML content and records responses generated with the keyboard.\n * The stimulus can be displayed until a response is given, or for a pre-determined amount of time.\n * The trial can be ended automatically if the participant has failed to respond within a fixed length of time.\n *\n * @author Josh de Leeuw\n * @see {@link https://www.jspsych.org/latest/plugins/html-keyboard-response/ html-keyboard-response plugin documentation on jspsych.org}\n */\nclass HtmlKeyboardResponsePlugin implements JsPsychPlugin<Info> {\n  static info = info;\n  constructor(private jsPsych: JsPsych) {}\n\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\n    var new_html = '<div id=\"jspsych-html-keyboard-response-stimulus\">' + trial.stimulus + \"</div>\";\n\n    // add prompt\n    if (trial.prompt !== null) {\n      new_html += trial.prompt;\n    }\n\n    // draw\n    display_element.innerHTML = new_html;\n\n    // store response\n    var response = {\n      rt: null,\n      key: null,\n    };\n\n    // function to end trial when it is time\n    const end_trial = () => {\n      // kill keyboard listeners\n      if (typeof keyboardListener !== \"undefined\") {\n        this.jsPsych.pluginAPI.cancelKeyboardResponse(keyboardListener);\n      }\n\n      // gather the data to store for the trial\n      var trial_data = {\n        rt: response.rt,\n        stimulus: trial.stimulus,\n        response: response.key,\n      };\n\n      // move on to the next trial\n      this.jsPsych.finishTrial(trial_data);\n    };\n\n    // function to handle responses by the subject\n    var after_response = (info) => {\n      // after a valid response, the stimulus will have the CSS class 'responded'\n      // which can be used to provide visual feedback that a response was recorded\n      display_element.querySelector(\"#jspsych-html-keyboard-response-stimulus\").className +=\n        \" responded\";\n\n      // only record the first response\n      if (response.key == null) {\n        response = info;\n      }\n\n      if (trial.response_ends_trial) {\n        end_trial();\n      }\n    };\n\n    // start the response listener\n    if (trial.choices != \"NO_KEYS\") {\n      var keyboardListener = this.jsPsych.pluginAPI.getKeyboardResponse({\n        callback_function: after_response,\n        valid_responses: trial.choices,\n        rt_method: \"performance\",\n        persist: false,\n        allow_held_key: false,\n      });\n    }\n\n    // hide stimulus if stimulus_duration is set\n    if (trial.stimulus_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(() => {\n        display_element.querySelector<HTMLElement>(\n          \"#jspsych-html-keyboard-response-stimulus\"\n        ).style.visibility = \"hidden\";\n      }, trial.stimulus_duration);\n    }\n\n    // end trial if trial_duration is set\n    if (trial.trial_duration !== null) {\n      this.jsPsych.pluginAPI.setTimeout(end_trial, trial.trial_duration);\n    }\n  }\n\n  simulate(\n    trial: TrialType<Info>,\n    simulation_mode,\n    simulation_options: any,\n    load_callback: () => void\n  ) {\n    if (simulation_mode == \"data-only\") {\n      load_callback();\n      this.simulate_data_only(trial, simulation_options);\n    }\n    if (simulation_mode == \"visual\") {\n      this.simulate_visual(trial, simulation_options, load_callback);\n    }\n  }\n\n  private create_simulation_data(trial: TrialType<Info>, simulation_options) {\n    const default_data = {\n      stimulus: trial.stimulus,\n      rt: this.jsPsych.randomization.sampleExGaussian(500, 50, 1 / 150, true),\n      response: this.jsPsych.pluginAPI.getValidKey(trial.choices),\n    };\n\n    const data = this.jsPsych.pluginAPI.mergeSimulationData(default_data, simulation_options);\n\n    this.jsPsych.pluginAPI.ensureSimulationDataConsistency(trial, data);\n\n    return data;\n  }\n\n  private simulate_data_only(trial: TrialType<Info>, simulation_options) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    this.jsPsych.finishTrial(data);\n  }\n\n  private simulate_visual(trial: TrialType<Info>, simulation_options, load_callback: () => void) {\n    const data = this.create_simulation_data(trial, simulation_options);\n\n    const display_element = this.jsPsych.getDisplayElement();\n\n    this.trial(display_element, trial);\n    load_callback();\n\n    if (data.rt !== null) {\n      this.jsPsych.pluginAPI.pressKey(data.response, data.rt);\n    }\n  }\n}\n\nexport default HtmlKeyboardResponsePlugin;\n","import { JsPsych } from \"jspsych\";\nimport jsPsychHtmlKeyboardResponse from '@jspsych/plugin-html-keyboard-response'\n\nexport function createTimeline(jsPsych: JsPsych,\n  stimuli: any,\n  keyboard_response: string = \"n\",          // Default key for response\n  trial_duration: number = 1000,                // Default trial duration in ms\n  post_trial_gap: number = 500,                 // Default gap between trials in ms\n  fixation_duration: number = 500,              // Default fixation duration in ms\n  n: number = 2,                                // Default value for N-back level\n  num_trials: number = 20,                      // Default number of trials\n  rep_ratio: number = 0.2, \n  debrief: boolean = false, \n  return_accuracy: boolean = false, \n  data_output: \"none\" | \"json\" | \"csv\" = \"none\") {\n\n  const trial_sequence: any[] = [];\n\n  for (var i = 0; i < num_trials; i++) {\n    if (i >= n && Math.random() < rep_ratio) {\n        trial_sequence.push(trial_sequence[i - n]);\n    } else {\n        const possible_stimuli = stimuli.filter(function (s: any) {\n          return (i < n || s !== trial_sequence[i - n]);\n        });\n        const random_stimulus = jsPsych.randomization.sampleWithoutReplacement(possible_stimuli, 1)[0];\n        trial_sequence.push(random_stimulus)\n      }\n    }\n\n  const timeline: any[] = [];\n\n  for (var i = 0; i < trial_sequence.length; i++) {\n\n    timeline.push({\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `<p style=\"font-size: 48px; color: gray;\">+</p>`,\n      choices: \"NO_KEYS\",\n      trial_duration: fixation_duration\n    });\n\n    timeline.push({\n      type: jsPsychHtmlKeyboardResponse,\n      stimulus: `<p style=\"font-size: 48px;\">${trial_sequence[i]}</p>`,\n      choices: [keyboard_response],\n      trial_duration: trial_duration,\n      post_trial_gap: post_trial_gap,\n      data: { correct: i >= n && trial_sequence[i].toLowerCase() === trial_sequence[i - n].toLowerCase() },\n      on_finish: function (data: any) {\n        data.correct_response = data.correct && data.response != null;\n        data.correct_no_response = !data.correct && data.response === null;\n      }\n    })\n  }\n\n\n  if (debrief){\n  if (return_accuracy){\n    timeline.push(\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n          var correct_responses = jsPsych.data.get().filter({correct_response: true}).count();\n          var correct_no_responses = jsPsych.data.get().filter({correct_no_response: true}).count();\n          var total_trials = jsPsych.data.get().count();\n          var accuracy = Math.round(((correct_responses + correct_no_responses) / total_trials) * 100);\n          const return_prompt = (correct_response: number, correct_no_response: number, accuracy: number): string => {\n            return `<p>Thank you for participating!</p>\n                    <p>You correctly responded to <strong>${correct_response}</strong> matching trials.</p>\n                    <p>You correctly did not respond to <strong>${correct_no_response}</strong> non-matching trials.</p>\n                    <p>Your accuracy was <strong>${accuracy}%</strong>.</p>\n                    <p>Press any key to finish the experiment.</p>`;\n          };\n          return return_prompt(correct_responses, correct_no_responses, accuracy)\n        },\n        choices: \"NO_KEYS\",\n        on_start: function () {\n          if (data_output == \"csv\"){\n          jsPsych.data.get().localSave('csv', `n_back.csv`);} else if (data_output == \"json\") {\n            jsPsych.data.get().localSave('json', `n_back.json`);\n          }\n        },\n        simulation_options: {\n          simulate: false\n        }\n      })\n  } else {\n    timeline.push(\n      {\n        type: jsPsychHtmlKeyboardResponse,\n        stimulus: function(){\n          return `<p>Thank you for participating!</p>\n            <p>Press any key to finish the experiment.</p>`;\n        },\n        choices: \"ALL_KEYS\",\n        on_start: function () {\n          if (data_output == \"csv\"){\n            return jsPsych.data.get().localSave('csv', `n_back.csv`);} else if (data_output == \"json\") {\n              return jsPsych.data.get().localSave('json', `n_back.json`)\n            } else {return null}\n        },\n        simulation_options: {\n          simulate: false\n        }\n      })\n  }}\n\n  return timeline\n}"]}